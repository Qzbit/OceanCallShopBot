from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# –î–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–∞—Ö
PRODUCTS = {
    "–†—ã–±–∞": {
        "–°—Ç–µ–π–∫–∏": [
            {"name": "–û—Å–µ—Ç—Ä–∞", "price": 4900, "unit": "1 –∫–≥"},
            {"name": "–ë–µ–ª—É–≥–∏", "price": 7000, "unit": "1 –∫–≥"},
            {"name": "–ß–∞–≤—ã—á–∏", "price": 3900, "unit": "1 –∫–≥ (–ö–∞–º—á–∞—Ç–∫–∞)"},
            {"name": "–°—ë–º–≥–∏", "price": 3100, "unit": "1 –∫–≥ (–ú—É—Ä–º–∞–Ω—Å–∫)"},
            {"name": "–ö–∏–∂—É—á–∞", "price": 2800, "unit": "1 –∫–≥ (–ö–∞–º—á–∞—Ç–∫–∞)"},
        ],
        "–ö–æ–ø—á—ë–Ω–∞—è —Ä—ã–±–∞": [
            {"name": "–°—ë–º–≥–∞ –ø–æ–¥–∫–æ–ø—á—ë–Ω–Ω–∞—è", "price": 5200, "unit": "1 –∫–≥"},
            {"name": "–ß–∞–≤—ã—á–∞ —Ö/–∫", "price": 6000, "unit": "1 –∫–≥ (–ö–∞–º—á–∞—Ç–∫–∞)"},
            {"name": "–ü–∞–ª—Ç—É—Å —Ö/–∫", "price": 3100, "unit": "1 –∫–≥ (–ö–∞–º—á–∞—Ç–∫–∞)"},
        ],
        "–í—è–ª–µ–Ω–∞—è —Ä—ã–±–∞": [
            {"name": "–ö–æ—Ä—é—à–∫–∞", "price": 3000, "unit": "1 –∫–≥ (–ö–∞–º—á–∞—Ç–∫–∞)"},
            {"name": "–ö–∞–º–±–∞–ª–∞-–Å—Ä—à", "price": 1600, "unit": "1 –∫–≥ (–ú—É—Ä–º–∞–Ω—Å–∫)"},
        ],
    },
    "–ò–∫—Ä–∞": [
        {"name": "–ù–µ—Ä–∫–∏", "price": 5200, "unit": "0.5 –∫–≥ (–ö–∞–º—á–∞—Ç–∫–∞)"},
        {"name": "–ö–∏–∂—É—á–∞", "price": 5500, "unit": "0.5 –∫–≥"},
        {"name": "–ì–æ—Ä–±—É—à–∏", "price": 4900, "unit": "0.5 –∫–≥"},
        {"name": "–ö–µ—Ç—ã", "price": 5500, "unit": "0.5 –∫–≥"},
    ],
    "–ö—Ä–∞–±—ã": [
        {"name": "–§–∞–ª–∞–Ω–≥–∞ –≥–∏–≥–∞–Ω—Ç", "price": 8500, "unit": "1 –∫–≥"},
        {"name": "–ö—É–ª–∞–∫ –∫—Ä–∞–±–∞", "price": 5000, "unit": "1 –∫–≥ (–ö–∞–º—á–∞—Ç–∫–∞)"},
        {"name": "–°–∞–ª–∞—Ç–Ω–æ–µ –º—è—Å–æ –∫—Ä–∞–±–∞", "price": 4500, "unit": "1 –∫–≥"},
    ],
}

# –°–º–∞–π–ª–∏–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
CATEGORY_EMOJIS = {
    "–†—ã–±–∞": "üêü",
    "–ò–∫—Ä–∞": "ü¶ë",
    "–ö—Ä–∞–±—ã": "ü¶Ä",
}

# –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = [
        [InlineKeyboardButton(f"{CATEGORY_EMOJIS.get(category, '')} {category}", callback_data=category)]
        for category in PRODUCTS
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω –ó–æ–≤ –û–∫–µ–∞–Ω! –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=reply_markup
    )

# –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
async def back_to_categories(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = [
        [InlineKeyboardButton(f"{CATEGORY_EMOJIS.get(category, '')} {category}", callback_data=category)]
        for category in PRODUCTS
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.edit_message_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=reply_markup
    )

# –ö–Ω–æ–ø–∫–∞ "–ù–∞ –≥–ª–∞–≤–Ω—É—é"
async def back_to_main(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await start(update, context)

# –í—ã–≤–æ–¥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
async def category_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    category = query.data

    if isinstance(PRODUCTS[category], dict):  # –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        keyboard = [
            [InlineKeyboardButton(subcategory, callback_data=f"{category}:{subcategory}")]
            for subcategory in PRODUCTS[category]
        ]
        keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            text=f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=reply_markup
        )
    else:  # –¢–æ–≤–∞—Ä—ã
        items = PRODUCTS[category]
        text = "\n".join(
            [f"{item['name']} - {item['price']} —Ä—É–± ({item['unit']})" for item in items]
        )
        keyboard = [
            [InlineKeyboardButton("–ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="main")],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text=f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n\n{text}", reply_markup=reply_markup)

# –í—ã–≤–æ–¥ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
async def subcategory_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    category, subcategory = query.data.split(":")

    items = PRODUCTS[category][subcategory]
    text = "\n".join(
        [f"{item['name']} - {item['price']} —Ä—É–± ({item['unit']})" for item in items]
    )
    keyboard = [
        [InlineKeyboardButton("–ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="main")],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f"{category}")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text=f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category} -> {subcategory}\n\n{text}", reply_markup=reply_markup)

# –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
def main() -> None:
    # –ó–∞–º–µ–Ω–∏—Ç–µ "YOUR_TELEGRAM_BOT_TOKEN" –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
    application = Application.builder().token("7779581117:AAEvf8misr26hqzRoyRHXR-ip6NlohJWKAk").build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –∫–æ–ª–±—ç–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(category_callback, pattern="^[^:]+$"))
    application.add_handler(CallbackQueryHandler(subcategory_callback, pattern=".+:.+"))
    application.add_handler(CallbackQueryHandler(back_to_categories, pattern="^back$"))
    application.add_handler(CallbackQueryHandler(back_to_main, pattern="^main$"))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == "__main__":
    main()
